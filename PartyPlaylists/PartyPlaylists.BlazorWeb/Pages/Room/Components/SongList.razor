@using PartyPlaylists.Models.DataModels;
@using PartyPlaylists.Services;
@using Cloudcrate.AspNetCore.Blazor.Browser.Storage;

@inject RoomDataStore RoomDataStore
@inject RefreshService RefreshService
@inject SessionStorage SessionStorage

<table>
    @if (Room != null && Room.RoomSongs.ToList().Count > 0)
    {
        <tr>
            <th>Artist</th>
            <th>Title</th>
            <th>Playlist Rating</th>
            <th>Added By</th>
            <th>Add Vote</th>
        </tr>
        @foreach (var roomSong in Room.RoomSongs.OrderByDescending(s => s.SongRating))
        {
            <tr>
                <td>@roomSong.Song.Artist</td>
                <td>@roomSong.Song.Name</td>
                <td>@roomSong.SongRating</td>
                <td>@roomSong.SongAddedBy</td>
                <td><button type="button" class="active" @onclick="@(() => AddVote(roomSong))"><img src="https://i.imgur.com/H5cbDvG.png" /></button></td>
            </tr>
        }
    }
</table>

@code {
    [Parameter] public Room Room { get; set; }

    public async Task AddVote(RoomSong roomSong)
    {
        var userToken = await SessionStorage.GetItemAsync($"room{Room.Id}");
        var room = await RoomDataStore.AddVoteToSong(userToken, Room.Id, roomSong.SongId, 1);
        if (room != null)
            roomSong.SongRating += 1;
        StateHasChanged();
    }
}
